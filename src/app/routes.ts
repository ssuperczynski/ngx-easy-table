import { ModuleWithProviders } from '@angular/core';
import { RouterModule } from '@angular/router';

import {
  AsyncComponent,
  BasicComponent,
  CheckboxDefaultComponent,
  CheckboxesComponent,
  ClickEventComponent,
  CollapsedRowsComponent,
  ColTemplateComponent,
  ColumnWidthComponent,
  CustomFiltersComponent,
  CustomIntableSortComponent,
  CustomizeThemeComponent,
  CustomSortComponent,
  DynamicConfigurationComponent,
  DynamicRowComponent,
  ExportsComponent,
  FilterTemplateComponent,
  FixedWidthComponent,
  GlobalSearchComponent,
  GroupRowsComponent,
  HorizontalScrollComponent,
  LiveUpdateComponent,
  ManyTablesComponent,
  ModalComponent,
  NoResultsTemplateComponent,
  PaginationComponent,
  PaginationRangeComponent,
  PersistStateComponent,
  ResizableComponent,
  RowTemplateComponent,
  SearchComponent,
  SelectAllTemplateComponent,
  SelectCellComponent,
  SelectColComponent,
  SelectRowComponent,
  ServerPaginationComponent,
  ServerSortComponent,
  SortComponent,
  StylesComponent,
  SummaryFooterComponent,
  TemplateComponent,
  ToggleColumnComponent,
  InlineComponent,
  InlineRowComponent,
  ContextMenuComponent,
  ApiComponent,
  ApiDocComponent,
  BootstrapComponent,
  DocComponent,
  InstallationComponent,
  PinnedComponent,
  ColumnClassComponent,
  NestedTableComponent,
  PersistStateRouterComponent,
  MobileComponent,
  LoadingTemplateComponent,
  AdditionalActionsTemplateComponent,
  NestedObjectComponent,
  CustomPaginationComponent,
  FilterHeaderTemplateComponent,
  ReorderComponent,
  InfiniteScrollComponent,
  InfiniteScrollServerComponent,
  InfiniteScrollServerTemplateComponent,
  CheckboxAsRadioComponent,
  RadioComponent,
  OnDragOverComponent,
} from './demo';
import { ROUTE } from './route-names';

export const routes = [
  { path: '', component: BasicComponent },
  { path: ROUTE.BASIC, component: BasicComponent },
  { path: ROUTE.SEARCH, component: SearchComponent },
  { path: ROUTE.PAGINATION, component: PaginationComponent },
  { path: ROUTE.SERVER_PAGINATION, component: ServerPaginationComponent },
  { path: ROUTE.SERVER_SORT, component: ServerSortComponent },
  { path: ROUTE.GLOBAL_SEARCH, component: GlobalSearchComponent },
  { path: ROUTE.SORT, component: SortComponent },
  { path: ROUTE.CLICK_EVENT, component: ClickEventComponent },
  { path: ROUTE.TEMPLATE, component: TemplateComponent },
  { path: ROUTE.MODAL, component: ModalComponent },
  { path: ROUTE.LIVE_UPDATE, component: LiveUpdateComponent },
  { path: ROUTE.SELECT_ROW, component: SelectRowComponent },
  { path: ROUTE.SELECT_COL, component: SelectColComponent },
  { path: ROUTE.SELECT_CELL, component: SelectCellComponent },
  { path: ROUTE.ROW_TEMPLATE, component: RowTemplateComponent },
  { path: ROUTE.GROUP_ROWS, component: GroupRowsComponent },
  { path: ROUTE.MANY_TABLES, component: ManyTablesComponent },
  { path: ROUTE.DYNAMIC_ROW, component: DynamicRowComponent },
  { path: ROUTE.CUSTOM_SORT, component: CustomSortComponent },
  { path: ROUTE.COLLAPSED_ROWS, component: CollapsedRowsComponent },
  { path: ROUTE.CHECKBOXES, component: CheckboxesComponent },
  { path: ROUTE.CHECKBOX_DEFAULT, component: CheckboxDefaultComponent },
  { path: ROUTE.CHECKBOX_AS_RADIO, component: CheckboxAsRadioComponent },
  { path: ROUTE.RADIO, component: RadioComponent },
  { path: ROUTE.HORIZONTAL_SCROLL, component: HorizontalScrollComponent },
  { path: ROUTE.CUSTOM_FILTERS, component: CustomFiltersComponent },
  { path: ROUTE.TOGGLE_COLUMN, component: ToggleColumnComponent },
  { path: ROUTE.DYNAMIC_CONFIGURATION, component: DynamicConfigurationComponent },
  { path: ROUTE.EXPORTS, component: ExportsComponent },
  { path: ROUTE.RESIZABLE, component: ResizableComponent },
  { path: ROUTE.COLUMN_WIDTH, component: ColumnWidthComponent },
  { path: ROUTE.FIXED_WIDTH, component: FixedWidthComponent },
  { path: ROUTE.CUSTOMIZE_THEME, component: CustomizeThemeComponent },
  { path: ROUTE.STYLES, component: StylesComponent },
  { path: ROUTE.COL_TEMPLATE, component: ColTemplateComponent },
  { path: ROUTE.SUMMARY_FOOTER, component: SummaryFooterComponent },
  { path: ROUTE.FILTER_TEMPLATE, component: FilterTemplateComponent },
  { path: ROUTE.FILTER_HEADER_TEMPLATE, component: FilterHeaderTemplateComponent },
  { path: ROUTE.CUSTOM_INTABLE_SORT, component: CustomIntableSortComponent },
  { path: ROUTE.PERSIST_STATE, component: PersistStateComponent },
  { path: ROUTE.PAGINATION_RANGE, component: PaginationRangeComponent },
  { path: ROUTE.ASYNC, component: AsyncComponent },
  { path: ROUTE.SELECT_ALL_TEMPLATE, component: SelectAllTemplateComponent },
  { path: ROUTE.NO_RESULTS_TEMPLATE, component: NoResultsTemplateComponent },
  { path: ROUTE.INLINE_CELL, component: InlineComponent },
  { path: ROUTE.INLINE_ROW, component: InlineRowComponent },
  { path: ROUTE.CONTEXT_MENU, component: ContextMenuComponent },
  { path: ROUTE.API, component: ApiComponent },
  { path: ROUTE.BOOTSTRAP, component: BootstrapComponent },
  { path: ROUTE.DOC, component: DocComponent },
  { path: ROUTE.API_DOC, component: ApiDocComponent },
  { path: ROUTE.INSTALLATION, component: InstallationComponent },
  { path: ROUTE.PINNED, component: PinnedComponent },
  { path: ROUTE.COLUMN_CLASS, component: ColumnClassComponent },
  { path: ROUTE.NESTED_TABLE, component: NestedTableComponent },
  { path: 'persist-state-router/:state', component: PersistStateRouterComponent },
  { path: ROUTE.MOBILE, component: MobileComponent },
  { path: ROUTE.LOADING_TEMPLATE, component: LoadingTemplateComponent },
  { path: ROUTE.ADDITIONAL_ACTIONS_TEMPLATE, component: AdditionalActionsTemplateComponent },
  { path: ROUTE.NESTED_OBJECT, component: NestedObjectComponent },
  { path: ROUTE.CUSTOM_PAGINATION, component: CustomPaginationComponent },
  { path: ROUTE.REORDER, component: ReorderComponent },
  { path: ROUTE.ON_DRAG_OVER, component: OnDragOverComponent },
  { path: ROUTE.INFINITE_SCROLL, component: InfiniteScrollComponent },
  { path: ROUTE.INFINITE_SCROLL_SERVER, component: InfiniteScrollServerComponent },
  { path: ROUTE.INFINITE_SCROLL_SERVER_TEMPLATE, component: InfiniteScrollServerTemplateComponent },
  { path: '**', component: BasicComponent },
];

export const routing: ModuleWithProviders<any> = RouterModule.forRoot(routes, { useHash: true });
